@page "/login"

@rendermode InteractiveServer

@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using DataObjects;

@inject HttpClient httpClient
@inject ProtectedSessionStorage MySession
@inject NavigationManager Navman
@inject Stack<string> redirStack;

@if (loggedUser == null) 
{
    <div id="ProtectedContent">
        <h3>Login</h3>
        @if (errors.Any())
        {
            <Alert Color="AlertColor.Danger">
                <strong>@errors.LastOrDefault().Value.Item1</strong>, @errors.LastOrDefault().Value.Item2
			</Alert>
        }

            <form @onsubmit="HandleLogin">
			  <div class="form-group">
				<label for="exampleInputEmail1">Email address / User name</label>
				<input type="text" class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" @bind="loginData.Email" >
				<small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
			  </div>
			  <div class="form-group">
				<label for="exampleInputPassword1">Password</label>
				<input type="password" class="form-control" id="exampleInputPassword1" @bind="loginData.Password">
			  </div>
			  <div class="form-group form-check">
				<input type="checkbox" class="form-check-input" id="exampleCheck1">
				<label class="form-check-label" for="exampleCheck1">Check me out</label>
			  </div>
            <Button Color="ButtonColor.Primary" Type="ButtonType.Submit"><Icon Name="IconName.Check"/>Login</Button>
            <Button Color="ButtonColor.Primary" @onclick='() => { redirStack.Push(Navman.Uri); Navman.NavigateTo("register");}'><Icon Name="IconName.Envelope"/>Register</Button>
			</form>
    </div>
}

@code {
    private string? username;
    private string? password;
    private string? errorMessage;
    private string? errorMessage_Session;
    Account? loggedUser;
    Account loginData;
    List<(string,MarkupString?)?> errors { get; set; } = new();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        loggedUser = (await MySession.GetAsync<Account>("user")).Value;
        if (loggedUser != null && firstRender) 
        {
            StateHasChanged();
        }
        if (loggedUser != null)
        {
			Navman.NavigateTo("/");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        loginData = new Account();
    }

    private async Task HandleLogin()
    {
        try
        {
			loginData.UserName = loginData.Email;
            var response = await httpClient.PostAsJsonAsync("http://localhost:5005/api/Accounts/login", loginData);
            if (response != null)
            {
                if (response.IsSuccessStatusCode)
                {
                    loggedUser = JsonSerializer.Deserialize<Account>(await response.Content.ReadAsStringAsync());
                    try
                    {
                        await (MySession.SetAsync("user", loggedUser));
                        Navman.NavigateTo(redirStack.Peek());
                    }
                    catch (Exception ex)
                    {
						errors.Add(("Unkown error has occured", new("Open a new issue <a href=\"https://github.com/qkweint/grad_project\">Here </a>")));
                    }
                }
                //switch case to deal with different status codes
                //will not enter switch case if successful transaction
                else
                {
                    switch (response.StatusCode)
                    {
                        case System.Net.HttpStatusCode.Unauthorized:
                            errors.Add(("Incorrect username or password", new("Please visit the <a href=\"/register\">Register</a> page")));
                            loggedUser = null;
                            break;

                        default:
                            errors.Add(("Unkown error has occured", new("Open a new issue <a href=\"https://github.com/qkweint/grad_project\">Here </a>")));
                            loggedUser = null;
                            break;
                    }
                }
            }
            else 
            {
                throw new Exception("Could not receive response from API");
            }
        }
        catch (Exception ex)
        {
			errors.Add(("Unkown error has occured", new($"Open a new issue <a href=\"https://github.com/qkweint/grad_project\">Here </a>\n{ex.Message}")));
            loggedUser = null;
        }
    }
}
