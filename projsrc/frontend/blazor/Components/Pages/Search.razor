@page "/search"

@using Blazorise
@using Blazorise.Icons.FontAwesome
@using DataObjects

@inject NavigationManager Navman
@inject HttpClient HttpClient
@inject ProtectedSessionStorage MySession
@inject IJSRuntime JSRuntime
@inject Stack<string> redirStack;

    <h5>Search</h5>
    <Form>
    <Field>
        <Label for="searchInput">Tags</Label>
        <InputText @bind-Value="@tags" Id="searchInput" />
    </Field>
    <Field>
        <Label for="searchInput">User name</Label>
        <InputText @bind-Value="@username" Id="searchInput" />
    </Field>
    <Button Color="Color.Primary" Clicked="@SearchFunc">
        <Blazorise.Icon> @FontAwesomeIcons.Search</Blazorise.Icon> 
        Search
    </Button>
    </Form>

    @if (searchResults != null && searchResults.Any())
    {
        <ListGroup Overflow="Overflow.Hidden" Style="margin-right: 60%;">
            @foreach (Page page in searchResults) 
            {
                if (page.Content != null) 
                {
                    <ListGroupItem Style="overflow:hidden; text-overflow:ellipsis;">
                        <Card>
                            <CardBody>
                                <CardTitle Style="font-size: 16pt; overflow:hidden; max-height 20px; line-clamp:2">
                                    <strong>@(page.Title)</strong>
                                </CardTitle>
                                <CardText Style="overflow: hidden; text-overflow:ellipsis; font-size: 10pt;">
                                    <p style="-webkit-line-clamp: 3; -webkit-box-orient: vertical; display: -webkit-box; overflow: hidden;">
                                        @(StringHtmlExtensions.StripHtml(page.Content)) 
                                    </p>
                                </CardText>
                                @if (page.Tags != null) {
                                    foreach (string tag in page.Tags.Split(',')) {
										<Badge Color="Color.Primary" Pill>@tag</Badge> <span> </span>
                                    }
                                }
                                <br/>
                                <Button Color="Color.Primary" Margin="Margin.Is2.FromTop" @onclick='() => {Navman.NavigateTo($"/content/{page.Id}");}'>
                                    Read more <Blazorise.Icon Name="IconName.ArrowRight" />
                                </Button>
                            </CardBody>
                        </Card>
                    </ListGroupItem>
                }
            }
        </ListGroup>
    }
    else if (searchPerformed)
    {
        <p>
                No results found.
        </p>
    }

@code {
    private string username;
    private string tags;
    private List<Page> searchResults;
    private bool searchPerformed;

    protected override async Task OnInitializedAsync()
    {
        searchResults = await HttpClient.GetFromJsonAsync<List<Page>>("http://localhost:5005/api/Pages/");
    }

    private async Task SearchFunc()
    {

        searchResults = await HttpClient.GetFromJsonAsync<List<Page>>($"http://localhost:5005/api/Pages/Search/" + ( username == null || username == "" ? "%20" : username) + ":" + ( tags == null  || tags == "" ? "%20" : tags));
        StateHasChanged();
    }
}

