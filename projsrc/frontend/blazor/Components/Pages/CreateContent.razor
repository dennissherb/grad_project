@page "/text-editor"

@using DataObjects

@inject HttpClient httpClient
@inject ProtectedSessionStorage MySession
@inject NavigationManager Navman
@inject Stack<string> redirStack;

<Alert Color="Color.Info" @bind-Visible="@visible">
    <Heading Size="HeadingSize.Is4" TextColor="TextColor.Success">
        You aren't  signed in
        <CloseButton />
    </Heading>
    <Paragraph>
        When posting a new blog post without being logged in, the post would be submitted anonymously and wouldn't appear on your account's page
    </Paragraph>
</Alert>

<Form>

    <small id="emailHelp" class="form-text text-muted">Title your post</small>
    <InputText @bind-Value="title"></InputText>
    &ensp;

    <small id="emailHelp" class="form-text text-muted">Blog content</small>
    <RichTextEdit @ref="richTextEditRef"
                  Theme="RichTextEditTheme.Snow"
                  ContentChanged="@OnContentChanged"
                  PlaceHolder="Type your post here..."
                  ReadOnly="@readOnly"
                  SubmitOnEnter="true"
                  EnterPressed="@OnSave"
                  ToolbarPosition="Blazorise.Placement.Bottom">
        <Editor>My example content</Editor>
        <Toolbar>
            <RichTextEditToolbarGroup>
                <RichTextEditToolbarButton Action="RichTextEditAction.Bold" />
                <RichTextEditToolbarButton Action="RichTextEditAction.Italic" />
                <RichTextEditToolbarSelect Action="RichTextEditAction.Size">
                    <RichTextEditToolbarSelectItem Value="small" />
                    <RichTextEditToolbarSelectItem Selected />
                    <RichTextEditToolbarSelectItem Value="large" />
                    <RichTextEditToolbarSelectItem Value="huge">Very Big</RichTextEditToolbarSelectItem>
                </RichTextEditToolbarSelect>
                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="ordered" />
                <RichTextEditToolbarButton Action="RichTextEditAction.List" Value="bullet" />
            </RichTextEditToolbarGroup>
            <!-- Custom toolbar content -->
            <RichTextEditToolbarGroup Float="Blazorise.Float.End">
                <Button onClick="window.open('https://www.quilljs.com/','quilljs')"><Blazorise.Icon Name="Blazorise.IconName.InfoCircle"/></Button>
                <Button Clicked="@OnSave"><Icon Name="IconName.Save" /></Button>
            </RichTextEditToolbarGroup>
        </Toolbar>
    </RichTextEdit>

    <small id="emailHelp" class="form-text text-muted">add tags, seperate with comma.</small>
    <InputText @bind-Value="tags">Article tags - seperate with comma</InputText>

     @if (savedContent != null) { 
         @((MarkupString)(savedContent))
         <div>
             @savedContent
         </div>
     }
</Form>


@code{
    protected RichTextEdit richTextEditRef;
    protected bool readOnly;
    protected string contentAsHtml;
    protected string contentAsDeltaJson;
    protected string contentAsText;
    protected string savedContent;
    protected Page page;
    public Account author;
    protected string tags;
    protected bool visible = false;
    protected string title;

    public async Task OnContentChanged()
    {
        contentAsHtml = await richTextEditRef.GetHtmlAsync();
        contentAsDeltaJson = await richTextEditRef.GetDeltaAsync();
        contentAsText = await richTextEditRef.GetTextAsync();
    }

    public async Task OnSave()
    {
        page = new();
        savedContent = await richTextEditRef.GetHtmlAsync();
        await richTextEditRef.ClearAsync();

        if (author != null)
            page.Author = author;
        else
            page.Author = await (await httpClient.GetAsync("http://localhost:5005/api/Accounts/0")).Content.ReadFromJsonAsync<Account>();

        page.Content = savedContent;
        page.Type = "Article";
        page.Tags = tags;
        page.Title = title;
        page.AuthorId = page.Author.Id;
        var response = await httpClient.PostAsJsonAsync("http://localhost:5005/api/Pages", page);
        page = response.Content.ReadFromJsonAsync<Page>().Result;
        Navman.NavigateTo($"content/{page.Id}");
    }

    protected override async Task OnInitializedAsync()
    {
        author = (await MySession.GetAsync<Account>("user")).Value;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) 
    {
        if (author == null || author.Id == 0)
        {
            visible = true;     
        }
    }
}


