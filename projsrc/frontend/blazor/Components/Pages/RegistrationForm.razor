@page "/register"

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using DataObjects

@inject HttpClient httpClient
@inject NavigationManager Navman
@inject ProtectedSessionStorage MySession
@inject Stack<string> redirStack;


@if (!registered)
{
    @if (errors.Any())
    {
        <Alert Color="AlertColor.Danger">
            <strong>@errors.LastOrDefault().Item1</strong>, @errors.LastOrDefault().Item2
        </Alert>
    }
    <form @onsubmit="HandleRegistration">
        <!-- Form Name -->
        <legend>Register</legend>

        <!-- Text input-->
        <div class="form-group">
            <label class="col-md-4 control-label" for="Name">Username</label>  
            <div class="col-md-5">
                <input id="Name" name="Name" type="text" placeholder="username" class="form-control input-md" required="" @bind="registerData.UserName">

            </div>
        </div>

        <!-- Password input-->
        <div class="form-group">
            <label class="col-md-4 control-label" for="passwordinput">Password</label>
            <div class="col-md-5">
                <input id="passwordinput" name="passwordinput" type="password" placeholder="" class="form-control input-md" required="" @bind="registerData.Password">
                <span class="help-block">max 16 characters</span>
            </div>
        </div>

        <!-- Password input-->
        <div class="form-group">
            <label class="col-md-4 control-label" for="confirm_password">Confirm Password</label>
            <div class="col-md-5">
                <input id="confirm_password" name="confirm_password" type="password" placeholder="Re-type password" class="form-control input-md" required="" @bind="confPass">

            </div>
        </div>

        <!-- Text input-->
        <div class="form-group">
            <label class="col-md-4 control-label" for="dateofbirth">Mobile Number</label>  
            <div class="col-md-5">
                <input id="dateofbirth" name="dateofbirth" type="date" placeholder="mm/dd/yyyy" class="form-control input-md" required="" @bind="registerData.DateOfBirth">
            </div>
        </div>

        <!-- Text input-->
        <div class="form-group">
            <label class="col-md-4 control-label" for="emailId">Email</label>  
            <div class="col-md-6">
                <input id="emailId" name="emailId" type="text" placeholder="user@domain.com" class="form-control input-md" required="" @bind="registerData.Email">
            </div>
        </div>

        <!-- Button -->
        <div class="form-group">
            <label class="col-md-4 control-label" for="submit"></label>
            <div class="col-md-4">
                <button id="submit" name="submit" class="btn btn-success">Submit</button>
            </div>
        </div>
    </form>
}
else
{

    
}

@code {
    private string username;
    private string email;
    private string password;
    private DateOnly dateOfBirth_d;
    private string dateOfBirth_s;
    private string errorMessage;
    private bool registered = false;
    protected bool loggedIn = false;
    Account registerData;
    List<(string,MarkupString)> errors { get; set; } = new();
    private string confPass { get; set; }

    protected override void OnInitialized()
    {
        registerData = new Account();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //is logged in
        if ((await MySession.GetAsync<Dictionary<string,string>>("user")).Value != null && ((await MySession.GetAsync<Dictionary<string,string>>("user")).Value.ContainsKey("accounts_id"))) 
            //if logged in go to app
            Navman.NavigateTo("/");
    }
    private async Task HandleRegistration()
    {
        try
        {
            if (registerData.Password != confPass) 
            {
                errors.Add(("Password do not match", new("Please re-enter the passwords")));
                confPass = String.Empty;
                return;
            }
            dateOfBirth_s = dateOfBirth_d.ToString("yyyy-MM-dd");
            var registrationData = new { accounts_user_name = username, accounts_email = email, accounts_password = password, accounts_date_of_birth = dateOfBirth_s };
            var response = await httpClient.PostAsJsonAsync<Account>("http://localhost:5005/api/Accounts/", registerData);
            if (response.IsSuccessStatusCode)
            {
                registered = true;
				Navman.NavigateTo(redirStack.Pop()); 
            }
            else
            {
                switch (response.StatusCode)
                {
                    //TODO: add more cases to deal with different stauts codes
                     default:
						errors.Add(("Unkown error has occured", new("if this repeats, open a new issue <a href=\"https://github.com/qkweint/grad_project\">Here </a>")));
                        registered = false;
                        break;
                }
            }
        }
        catch (Exception ex)
        {
			errors.Add(("Exception was thrown", new($"{ex.Message}")));
        }
    }

    private void NavigateToLogin()
    {
        Navman.NavigateTo("/login");
    }
}
