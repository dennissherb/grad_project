@page "/content/{PageId}"

@rendermode InteractiveServer

@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using DataObjects

@inject NavigationManager Navman
@inject HttpClient HttpClient
@inject ProtectedSessionStorage MySession
@inject IJSRuntime JSRuntime
@inject Stack<string> redirStack;
@if (author != null && page != null)
{
    <Jumbotron>
        <JumbotronTitle>
            @(page.Title)
        </JumbotronTitle>
        <JumbotronSubtitle>
            <div>@(page.Date)</div>
            By <strong>@author.UserName</strong>
        </JumbotronSubtitle>
        <Divider></Divider>
        <Paragraph>
            @if (page != null)
            {
                @((MarkupString)(page.Content))
            }
        </Paragraph>
    </Jumbotron>
    <ListGroup>
        @foreach (Reply reply in replies)
        {
        <ListGroupItem>
            @reply.Content

        </ListGroupItem>
            @if (reply.Author != null) 
            { 
                <ListGroupItem>
                @reply.Author.UserName
                </ListGroupItem>
            }
        }
    </ListGroup>
}

@code {
    [Parameter]
    public string PageId { get; set; }
    Page? page;
    Account? account;
    Account author;
    List<Reply> replies;

    protected override async Task OnInitializedAsync()
    {
        //load the page from api
        page = await HttpClient.GetFromJsonAsync<Page>($"http://localhost:5005/api/Pages/{PageId}");
        author = await HttpClient.GetFromJsonAsync<Account>($"http://localhost:5005/api/Accounts/{page.AuthorId}");
        replies = await HttpClient.GetFromJsonAsync<List<Reply>>($"http://localhost:5005/api/Replies/ByPage/{PageId}");

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        account = (await MySession.GetAsync<Account>("user")).Value;
    }
}
