@page "/"

@rendermode InteractiveServer

@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using blazor
@using DataObjects
@using System.Text.RegularExpressions;

@inject NavigationManager Navman
@inject HttpClient HttpClient
@inject ProtectedSessionStorage MySession
@inject IJSRuntime JSRuntime
@inject Stack<string> redirStack;

@if (loggedUser != null)
    {
        <div id="ProtectedContent"> 
            <PageTitle>Home</PageTitle>
            <h1>Hello, @loggedUser.UserName</h1>
            @if (AuthoredPages != null) {
				<ListGroup Overflow="Overflow.Hidden" Style="margin-right: 50%;">
					@foreach (Page page in AuthoredPages) 
					{
						if (page.Content != null) 
						{
							<ListGroupItem Style="overflow:hidden; text-overflow:ellipsis;">
                                <Card>
                                    <CardBody>
										<CardTitle Style="font-size: 16pt; overflow:hidden; line-clamp: 2">
											<strong>@((MarkupString)(StringHtmlExtensions.Truncate((StringHtmlExtensions.StripHtml(page.Content)), 50)))</strong>
										</CardTitle>
										<CardText Style="overflow: hidden; text-overflow:ellipsis; font-size: 10pt; -webkit-line-clamp: 2">
                                            @((MarkupString)(page.Content)) 
										</CardText>
                                        @if (page.Tags != null) { <Badge Color="Color.Primary" Pill>@(page.Tags)</Badge> }
                                        <br/>
										<Button Color="Color.Primary" Margin="Margin.Is2.FromTop" @onclick='() => {Navman.NavigateTo($"/content/{page.Id}");}'>
											Read more <Icon Name="IconName.ArrowRight" />
										</Button>
									</CardBody>
                                </Card>
							</ListGroupItem>
						}
					}
				</ListGroup>
            }
            else 
            {
                <p>You haven't written anything yet</p>
            }
        </div>
    }


@code 
{
    Account? loggedUser;
    List<Page>? AuthoredPages;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        loggedUser = (await MySession.GetAsync<Account>("user")).Value;
        if (firstRender) 
        {
            StateHasChanged();
        }
        if (loggedUser == null)
        {
            redirStack.Push(Navman.Uri);
            Navman.NavigateTo("/login");
        } 

        if (loggedUser != null)
        {
            //AuthoredPages = (await HttpClient.GetAsync<List<Page>>($"https://localhost:5005/api/Page/ByAuthor/{loggedUser.Id}"));
            AuthoredPages = await HttpClient.GetFromJsonAsync<List<Page>>($"http://localhost:5005/api/Pages/ByAuthor/{loggedUser.Id}");
            if (firstRender)
            {
                StateHasChanged();
            }
        }
    }
    
    protected async Task SignOut() {
        await MySession.DeleteAsync("user");
        Navman.NavigateTo("/login");
		await JSRuntime.InvokeVoidAsync("location.reload");
    }
}