@page "/"

@rendermode InteractiveServer

@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using blazor
@using DataObjects
@using System.Text.RegularExpressions;

@inject NavigationManager Navman
@inject HttpClient HttpClient
@inject ProtectedSessionStorage MySession
@inject IJSRuntime JSRuntime
@inject Stack<string> redirStack;

<script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-4315688409988285"
        crossorigin="anonymous"></script>

@if (account != null)
    {
        <div id="ProtectedContent"> 
            <PageTitle>Home</PageTitle>
            <h1>Hello, @account.UserName</h1>
            @if (AuthoredPages != null) {
				<ListGroup Overflow="Overflow.Hidden" Style="margin-right: 60%;">
					@foreach (Page page in AuthoredPages) 
					{
						if (page.Content != null) 
						{
							<ListGroupItem Style="overflow:hidden; text-overflow:ellipsis;">
                                <Card>
                                    <CardBody>
										<CardTitle Style="font-size: 16pt; overflow:hidden; max-height 20px; line-clamp:2">
                                            <strong>@(page.Title)</strong>
										</CardTitle>
										<CardText Style="overflow: hidden; text-overflow:ellipsis; font-size: 10pt;">
                                            <p style="-webkit-line-clamp: 3; -webkit-box-orient: vertical; display: -webkit-box; overflow: hidden;">
                                                @(StringHtmlExtensions.StripHtml(page.Content)) 
                                            </p>
										</CardText>
										@if (page.Tags != null) {
											foreach (string tag in page.Tags.Split(',')) {
												<Badge Color="Color.Primary" Pill>@tag</Badge> <span> </span>
											}
										}
                                        <br/>
										<Button Color="Color.Primary" Margin="Margin.Is2.FromTop" @onclick='() => {Navman.NavigateTo($"/content/{page.Id}");}'>
											Read more <Icon Name="IconName.ArrowRight" />
										</Button>
										@if (account.Id == page.AuthorId || account.PermGroup == "admin")
										{
											<Button Color="Color.Danger" Class="inline-flex" @onclick='() => {DeletePage(page.Id); }'><Icon Name="IconName.Plane"></Icon><span> &nbsp; </span><Icon Name="IconName.Pause"></Icon></Button>
										}
									</CardBody>
                                </Card>
							</ListGroupItem>
						}
					}
				</ListGroup>
            }
            else 
            {
                <p>You haven't written anything yet</p>
            }
        </div>
    }


@code 
{
    Account? account;
    List<Page>? AuthoredPages;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        account = (await MySession.GetAsync<Account>("user")).Value;
        if (firstRender) 
        {
            StateHasChanged();
        }
        if (account == null)
        {
            redirStack.Push(Navman.Uri);
            Navman.NavigateTo("/login");
        } 

        if (account != null)
        {
            AuthoredPages = await HttpClient.GetFromJsonAsync<List<Page>>($"http://localhost:5005/api/Pages/ByAuthor/{account.Id}");
            if (firstRender)
            {
                StateHasChanged();
            }
        }
    }
    
    protected async Task SignOut() {
        await MySession.DeleteAsync("user");
        Navman.NavigateTo("/login");
		await JSRuntime.InvokeVoidAsync("location.reload");
    }

    public async void DeletePage(int? id) 
    {
        var response = await HttpClient.DeleteAsync($"http://localhost:5005/api/Pages/" + id);
		AuthoredPages = await HttpClient.GetFromJsonAsync<List<Page>>($"http://localhost:5005/api/Pages/ByAuthor/{account.Id}");
        StateHasChanged();
    }
}