@page "/manage/user"

@rendermode InteractiveServer
@attribute [StreamRendering(true)]

@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject HttpClient httpClient
@inject Dictionary<string,string> userData
@inject ProtectedSessionStorage MySession
@inject NavigationManager Navman

@if (accountsTable != null && accountsTable.Any())
{
    <p color="red">@errorMessages.LastOrDefault()</p>
    <table class="table">
        <thead>
            <tr>
                @foreach (var key in accountsTable.First().Keys)
                {
                    if (key != "accounts_id")
                    {
                        <th>@key</th>
                    }
                }
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var data in accountsTable)
            {
                <tr>
                    @foreach (var keyValuePair in data)
                    {
                        if (keyValuePair.Key != "accounts_id")
                        {
                            <td>@keyValuePair.Value</td>
                        }
                    }
                    <td>
                        <button @onclick="() => DeleteElementAsync(data)">Delete</button>
                        <button @onclick="() => EditElement(data)">Edit</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <p>Loading...</p>
}


@code {
    List<Dictionary<string, string>> accountsTable;
    List<string> errorMessages;
    Dictionary<string,string> loggedUser;
    const string edit_page_addr = "/management/user/edit/";
    protected override async Task OnInitializedAsync()
    {
        loggedUser = (await MySession.GetAsync<Dictionary<string, string>>("user")).Value;
        if (loggedUser == null || loggedUser["accounts_perm_group"] != "admin")
            Navman.NavigateTo("/login");

        errorMessages = new();
        accountsTable = await httpClient.GetFromJsonAsync<List<Dictionary<string, string>>>("http://localhost:5005/api/Account/GetEntireTable");
        StateHasChanged();
    }

    private async Task DeleteElementAsync(Dictionary<string,string> user)
    {

        var response = await httpClient.PostAsJsonAsync("http://localhost:5005/api/Account/delete_as_admin", user);
        StateHasChanged();
        if (!response.IsSuccessStatusCode)
        {
			errorMessages.Add($" An error has occurred: {response.StatusCode} {response.ReasonPhrase}");
        }
        else 
        {
            errorMessages.Add("Deletion successful");
            await OnInitializedAsync();
        };
    }

    void EditElement(Dictionary<string, string> data)
    {
        // Extract the accounts_id from the data
        if (data.TryGetValue("accounts_id", out var accountIdObj) && accountIdObj is string accountId)
        {
            // Use the NavigationManager to navigate to the edit URL based on the accounts_id
            Navman.NavigateTo($"/manage/user/edit/{accountId}");
        }
    }
}
