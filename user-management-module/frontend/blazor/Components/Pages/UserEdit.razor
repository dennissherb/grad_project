@page "/manage/user/edit/{UserId}"
@*@attribute [StreamRendering(true)]*@
@rendermode InteractiveServer

@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject HttpClient httpClient
@inject ProtectedSessionStorage MySession
@inject NavigationManager Navman
@inject IJSRuntime JSRuntime

<h3>User Edit</h3>
@if (errors != null && errors.LastOrDefault() != null)
{
    <p>@errors.LastOrDefault()</p>
}

@if (loggedIn)
{
    @if (confirmSuccess == false)
    {
        <Label>Confirm password:</Label>
        <input type="password" @bind="confirmPass" class="@GetPasswordInputClass()">
        <button @onclick="InitializeEditorAsync">Confirm</button>
    }
    @if (user == null)
    {
        <p>Loading...</p>
    }
    else
    {
        @foreach (var kvp in user)
        {
            @switch (kvp.Key.ToString())
            {
                case "accounts_perm_group":
                    if (loggedUser["accounts_perm_group"] == "sysadmin") {
						<label>@kvp.Key.Remove(0,9):</label>
						<input type="password" @bind = "newUser[kvp.Key]">
						<br />
                    }
                    break;

                case "accounts_id":
                    break;

                case "accounts_password":
                    <label>@kvp.Key.Remove(0,9):</label>
                    <input type="password" @bind = "newUser[kvp.Key]">
                    <br />
                    break;

                case "accounts_date_of_birth":
                    <label>@kvp.Key.Remove(0,9):</label>
                    <input type="date" @bind="date" />
                    <br />
                    break;

                default:
                    <label>@kvp.Key.Remove(0,9):</label>
                    <input type="text" @bind = "newUser[kvp.Key]">
                    <br />
                    break;

            }
            <br />
        }
        <button @onclick="UpdateUserAsync"> Update</button>
    }

}
else
{
    <h1>No Permission</h1>
}

@code {
    public Dictionary<string, string>? user { get; set; }
    public Dictionary<string, string>? newUser;
    public Dictionary<string, string>? loggedUser;
    public bool confirmSuccess;
    public string? confirmPass;
    bool loggedIn;

    List<(string, MarkupString?)?> errors = new();
    public DateTime? date;


    [Parameter]
    public string UserId { get; set; }
    protected async Task<Dictionary<string, string>> SetLoggedUserAsync()
    { 
        Dictionary<string, string> LoggedUser = null;
        try
        {
            var session = await MySession.GetAsync<Dictionary<string, string>>("user");
            if (session.Value != null)
                LoggedUser = session.Value;
        }
        catch (Exception ex)
        {
            errors.Add(("Exception was caught: " + ex.Message, null));
            StateHasChanged();
        }
        return LoggedUser;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        loggedUser = (await MySession.GetAsync<Dictionary<string, string>>("user")).Value;
        if (loggedUser == null)
            Navman.NavigateTo("/");
        else
            loggedIn = (loggedUser != null);
        if(firstRender)
            StateHasChanged();
    }

    public async Task InitializeEditorAsync()
    {
        date = null;
        newUser = new();
        try
        {
            loggedUser = await SetLoggedUserAsync();
            if (loggedUser != null && confirmPass == loggedUser["accounts_password"]) {
                confirmSuccess = true;
                ClearErrorAsync();
                if ((loggedUser["accounts_id"] == UserId || loggedUser["accounts_perm_group"] == "admin"))
                {
                    user = await httpClient.GetFromJsonAsync<Dictionary<string, string>>($"http://localhost:5005/api/Account/GetByID/{UserId}");
                    foreach (var kvp in user)
                    {
                        switch (kvp.Key)
                        {
                            case "accounts_id":
                                newUser.Add(kvp.Key, kvp.Value);
                                break;
                            case "accounts_perm_group":
                                newUser.Add(kvp.Key, kvp.Value);
                                break;
                            default:
                                newUser.Add(kvp.Key, "");
                                break;
                        }
                    }
                }
                else
                {
                    errors.Add(("No permission", null));
                }
            }
            else
            {
                bool confirmSuccess = false;
                errors.Add(("Incorrect password", null));
            }
            StateHasChanged();
        }

        catch (Exception ex)
        {
            errors.Add(("Exception was caught: " + ex.Message, null));
        }
        StateHasChanged();
    }

    private string GetPasswordInputClass()
    {
        return confirmSuccess ? string.Empty : "invalid";
    }

    private async void UpdateUserAsync()
    {
        HttpResponseMessage response;
        if (date.HasValue)
            newUser["accounts_date_of_birth"] = date.Value.ToString("yyyy-MM-dd");
        try
        {
            response = await httpClient.PostAsJsonAsync($"http://localhost:5005/api/Account/update_user", newUser);
            if (response.IsSuccessStatusCode) {
                ClearErrorAsync();
                user = JsonSerializer.Deserialize<Dictionary<string,string>>(await (response.Content.ReadAsStringAsync()));
                if ((await MySession.GetAsync<Dictionary<string,string>>("user")).Value["accounts_perm_group"] != "admin")
					await MySession.SetAsync("user", user);
                ClearFieldsAsync();
                await JSRuntime.InvokeVoidAsync("alert", "Edit Successful");

            }
            else
            {
                switch (response.StatusCode)
                {
                    //TODO: add more cases to deal with different stauts codes
                    default:
						errors.Add(($" An error has occurred: {response.StatusCode} {response.ReasonPhrase}", null));
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            errors.Add(("Exception was caught" + ex.Message, null)); 
        }

    }

    private async void ClearFieldsAsync()
    {
        // Clears all the fields using the bound value
        foreach (var kvp in newUser)
        {
            if (kvp.Key != "accounts_id")
                newUser[kvp.Key] = string.Empty;
        }
    }

    private async void ClearErrorAsync()
    {
        if (errors != null)
        {
			errors.Add(null);
        }
    }
}