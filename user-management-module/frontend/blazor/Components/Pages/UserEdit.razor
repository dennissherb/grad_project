@page "/manage/user/edit/{UserId}"
@* @rendermode InteractiveServer *@
@* @attribute [StreamRendering(true)] *@
@rendermode @(new InteractiveServerRenderMode(prerender: true))

@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject HttpClient httpClient
@inject Dictionary<string, string> userData
@inject ProtectedSessionStorage MySession
@inject NavigationManager Navman
@inject IJSRuntime JSRuntime

<h3>User Edit</h3>
<p foreground-color="red">@errorMessage</p>

@if (user == null) 
{
    <p>Loading user data...</p>
}
else 
{
    <div>
    @foreach (var kvp in user) {
            @switch (kvp.Key.ToString())
            {
                case "accounts_perm_group":
                    break;

                case "accounts_id":
                    break;

                case "accounts_password":
                    <label>@kvp.Key:</label>
                    <input type="password" @bind = "newUser[kvp.Key]">
                    <p></p>
                    break;

                case "accounts_date_of_birth":
                    <label>@kvp.Key:</label>
                    <input type="date" @bind="date" />
                    <p></p>
                    break;

                default:
					<label>@kvp.Key:</label>
                    <input type="text" @bind = "newUser[kvp.Key]">
                    <p></p>
                    break;

            }
	}
    <button @onclick="UpdateUserAsync">Update</button>
    </div>
}

@code {
    public Dictionary<string, string> user { get; set; }
    public Dictionary<string, string> newUser;
    public Dictionary<string, string> loggedUser;

    public string errorMessage;
    public DateTime? date;


    [Parameter]
    public string UserId { get; set; }
    protected async Task<Dictionary<string, string>> SetLoggedUserAsync()
    { 
        Dictionary<string, string> LoggedUser = null;
        try
        {
            var session = await MySession.GetAsync<Dictionary<string, string>>("user");
            if (session.Value != null)
                LoggedUser = session.Value;
        }
        catch (Exception ex)
        {
            errorMessage = "Exception was caught: " + ex.Message;
        }
        return LoggedUser;
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            loggedUser = await SetLoggedUserAsync();
            if ((loggedUser != null && (loggedUser["accounts_id"] == UserId) || loggedUser["accounts_perm_group"] == "admin"))
            {
                user = await httpClient.GetFromJsonAsync<Dictionary<string, string>>($"http://localhost:5005/api/Account/GetByID/{UserId}");
                foreach (var kvp in user)
                {
                    switch (kvp.Key)
                    {
                        case "accounts_id":
                            newUser.Add(kvp.Key, kvp.Value);
                            break;
                        case "accounts_perm_group":
                            newUser.Add(kvp.Key, kvp.Value);
                            break;
                        default:
                            newUser.Add(kvp.Key, "");
                            break;
                    }
                }
            }
            else
                errorMessage = "No permission";
        }
        catch (Exception ex)
        {
            errorMessage = "Exception was caught: " + ex.Message;
        }
    }


    protected override async Task OnParametersSetAsync()
    {
        // date = null;
        // newUser = new();
        // StateHasChanged();
        // try
        // {
        //     loggedUser = await SetLoggedUserAsync();
        //     if ((loggedUser != null && (loggedUser["accounts_id"] == UserId) || loggedUser["accounts_perm_group"] == "admin"))
        //     {
        //         user = await httpClient.GetFromJsonAsync<Dictionary<string, string>>($"http://localhost:5005/api/Account/GetByID/{UserId}");
        //         foreach (var kvp in user)
        //         {
        //             switch (kvp.Key)
        //             {
        //                 case "accounts_id":
        //                     newUser.Add(kvp.Key, kvp.Value);
        //                     break;
        //                 case "accounts_perm_group":
        //                     newUser.Add(kvp.Key, kvp.Value);
        //                     break;
        //                 default:
        //                     newUser.Add(kvp.Key, "");
        //                     break;
        //             }
        //         }
        //     }
        //     else
        //         errorMessage = "No permission";
        // }
        // catch (Exception ex)
        // {
        //     errorMessage = "Exception was caught: " + ex.Message;
        // }
    }

    private async void UpdateUserAsync()
    {
        HttpResponseMessage response;
        if (date.HasValue)
            newUser["accounts_date_of_birth"] = date.Value.ToString("yyyy-MM-dd");
        try
        {
            response = await httpClient.PostAsJsonAsync($"http://localhost:5005/api/Account/update_user", newUser);
            if (response.IsSuccessStatusCode) {
                errorMessage = null;
                user = JsonSerializer.Deserialize<Dictionary<string,string>>(await (response.Content.ReadAsStringAsync()));
                await MySession.SetAsync("user", user);
                ClearFieldsAsync();
                await JSRuntime.InvokeVoidAsync("alert", "Edit Successful");

            }
            else
            {
                switch (response.StatusCode)
                {
                    //TODO: add more cases to deal with different stauts codes
                    default:
                        errorMessage = "error has occurred " + response.ToString();
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message; 
        }

    }

    private async void ClearFieldsAsync()
    {
        // Clears all the fields using the bound value
        foreach (var kvp in newUser)
        {
            newUser[kvp.Key] = "";
        }
    }

      

}