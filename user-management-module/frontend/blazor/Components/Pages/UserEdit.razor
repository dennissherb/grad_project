@page "/manage/user/edit/{UserId}"
@rendermode InteractiveServer
@attribute [StreamRendering(true)]

@using System.Text.Json
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject HttpClient httpClient
@inject Dictionary<string, string> userData
@inject ProtectedSessionStorage MySession
@inject NavigationManager Navman

<h3>User Edit</h3>
<p foreground-color="red">@errorMessage</p>

 @if (user == null)
{
    <p>Loading user data...</p>
}
else
{
    <div>
    @foreach (var kvp in user) {
            @switch (kvp.Key.ToString())
            {
                case "accounts_perm_group":
                    break;

                case "accounts_id":
                    break;

                case "accounts_password":
                    <label>@kvp.Key:</label>
                    <input type="password" @bind = "newUser[kvp.Key]">
                    <p></p>
                    break;

                case "accounts_date_of_birth":
                    <label>@kvp.Key:</label>
                    <input type="date" @bind = "date"/>
                    <p></p>
                    break;

                default:
					<label>@kvp.Key:</label>
                    <input type="text" @bind = "newUser[kvp.Key]">
                    <p></p>
                    break;

            }
	}
    <button @onclick="UpdateUser">Update</button>
    </div>
}

@code {
    public Dictionary<string,string> user;
    string errorMessage;
    public Dictionary<string, string> newUser;
    public DateTime date;


    [Parameter]
    public string UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        newUser = new();
        try
        {
            user = await httpClient.GetFromJsonAsync<Dictionary<string, string>>($"http://localhost:5005/api/Account/GetByID/{UserId}");
            foreach (var kvp in user)
            {
                switch (kvp.Key)
                {
                    case "accounts_id":
                        newUser.Add(kvp.Key, kvp.Value);
                        break;
                    case "accounts_perm_group":
                        newUser.Add(kvp.Key, kvp.Value);
                        break;
                    default:
                        newUser.Add(kvp.Key, "");
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "Exception was caught: " + ex.Message;
        }

        StateHasChanged();
    }

    private async void UpdateUser()
    {
        HttpResponseMessage response;
        newUser["accounts_date_of_birth"] = date.ToString("yyyy-MM-dd");
        try
        {
            response = await httpClient.PostAsJsonAsync($"http://localhost:5005/api/Account/update_user", newUser);
            if (response.IsSuccessStatusCode) {
                errorMessage = null;
            }
            else
            {
                switch (response.StatusCode)
                {
                    //TODO: add more cases to deal with different stauts codes
                     default:
                        errorMessage = "Unkown error has occurred";
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message; 
        }

    }

      

}