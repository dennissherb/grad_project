@page "/register"

@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@inject HttpClient httpClient
@inject NavigationManager Navman
@inject ProtectedSessionStorage MySession

@if (!registered)
{
    <div id="RegistrationForm">
        <h3>Register</h3>

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <p style="color: red;">@errorMessage</p>
        }
        <form @onsubmit="HandleRegistration">
            <label>
                Username:
                <input type="text" @bind="username" style="@((string.IsNullOrEmpty(username) ? "border-color: red;" : ""))" required />
                <span style="color: red;">@((string.IsNullOrEmpty(username) ? "*" : ""))</span>
            </label><br />

            <label>
                Email:
                <input type="email" @bind="email" style="@((string.IsNullOrEmpty(email) ? "border-color: red;" : ""))" required />
                <span style="color: red;">@((string.IsNullOrEmpty(email) ? "*" : ""))</span>
            </label><br />

            <label>
                Password:
                <input type="password" @bind="password" style="@((string.IsNullOrEmpty(password) ? "border-color: red;" : ""))" required />
                <span style="color: red;">@((string.IsNullOrEmpty(password) ? "*" : ""))</span>
            </label><br />

            <label>
                Date of Birth:
                <input type="date" @bind="dateOfBirth_d" style="@((dateOfBirth_d == null ? "border-color: red;" : ""))" required />
                <span style="color: red;">@((dateOfBirth_d == null ? "*" : ""))</span>
            </label>
            <br />

            <button type="submit">Register</button>
        </form>
    </div>
}
else
{
    <p>You have successfully registered!</p>
    <p><button @onclick="NavigateToLogin">Login</button></p>
    <p><button @onclick="()=>Navman.NavigateTo(login_page_addr)">Login</button></p>
}

@code {
    private string username;
    private string email;
    private string password;
    private DateOnly dateOfBirth_d;
    private string dateOfBirth_s;
    private string errorMessage;
    private bool registered = false;
    protected bool loggedIn = false;
    private string login_page_addr = "/login";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        //is logged in
        if ((await MySession.GetAsync<Dictionary<string,string>>("user")).Value != null && ((await MySession.GetAsync<Dictionary<string,string>>("user")).Value.ContainsKey("accounts_id"))) 
            //if logged in go to app
            Navman.NavigateTo("/");
    }
    private async Task HandleRegistration()
    {
        try
        {
            dateOfBirth_s = dateOfBirth_d.ToString("yyyy-MM-dd");
            var registrationData = new { accounts_user_name = username, accounts_email = email, accounts_password = password, accounts_date_of_birth = dateOfBirth_s };
            var response = await httpClient.PostAsJsonAsync("http://localhost:5005/api/Account/register", registrationData);
            if (response.IsSuccessStatusCode)
            {
                errorMessage = null;
                registered = true;
            }
            else
            {
                switch (response.StatusCode)
                {
                    //TODO: add more cases to deal with different stauts codes
                     default:
                        errorMessage = "Unkown error has occurred";
                        registered = false;
                        break;
                }
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred: " + ex.Message;
        }
    }

    private void NavigateToLogin()
    {
        Navman.NavigateTo("/login");
    }
}
